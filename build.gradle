plugins {
    id "org.jetbrains.intellij" version "0.4.20"
    id "org.jetbrains.grammarkit" version "2020.1.2"
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.jetbrains.grammarkit'
apply plugin: 'jacoco'
apply plugin: "com.github.ManifestClasspath"

def isCI = System.getenv("CI")
def ideaVersionExternDefinition = System.getenv("IDEA_VERSION")
ideaVersion = ideaVersionExternDefinition ? ideaVersionExternDefinition : ideaVersion
def isEAP = ideaVersion.contains("LATEST-EAP-SNAPSHOT") || ideaVersion.take(4).contains(".")
def artifactVersion = pluginVersion + "-" + (isEAP ? "EAP" : ideaVersion)
println "IdeaVersion is : ${ideaVersion}"
println "ArtifactVersion is : ${artifactVersion}"

group = pluginGroup
version = artifactVersion

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
//  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

sourceSets {
    main {
        java.srcDirs 'src/main/java'
        resources.srcDirs 'src/main/resources'
    }
    test {
        java.srcDir 'test/java'
        resources.srcDirs 'test/resources'
    }
}

dependencies {
    compile group: 'org.apache.maven', name: 'maven-artifact', version: '3.6.3'
    testImplementation("junit:junit:4.13")
}

// https://www.jetbrains.org/intellij/sdk/docs/tutorials/build_system/gradle_guide.html
// Setup DSL
intellij {
    version ideaVersion
    println "Building for IntelliJ version: ${version}"
    pluginName pluginName
    sandboxDirectory = "${rootProject.projectDir}/idea-sandbox/idea-${ideaVersion}"
    plugins 'java', 'maven'
}

// Running DSL
runIde {
//  jvmArgs '-Didea.ProcessCanceledException=disabled'
}

// Patching DSL
patchPluginXml {
    version artifactVersion
    pluginDescription(file(descriptionFile).text)
    changeNotes(file(changesFile).text)
}

// Publishing DSL
publishPlugin {
    token System.getenv('IJ_PLUGIN_TOKEN')
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

configurations {
}

// Tasks
clean.doFirst {
    delete 'out'
}

check.dependsOn jacocoTestReport

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
    if (isCI) {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat "full"
        }
    }

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}

